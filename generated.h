/*
 * Generated by gdbus-codegen 2.60.7 from org.freedesktop.timedate1.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GENERATED_H__
#define __GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.timedate1 */

#define MINI_TIME_DATE_TYPE_TIMEDATE1 (mini_time_date_timedate1_get_type ())
#define MINI_TIME_DATE_TIMEDATE1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MINI_TIME_DATE_TYPE_TIMEDATE1, MiniTimeDateTimedate1))
#define MINI_TIME_DATE_IS_TIMEDATE1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MINI_TIME_DATE_TYPE_TIMEDATE1))
#define MINI_TIME_DATE_TIMEDATE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), MINI_TIME_DATE_TYPE_TIMEDATE1, MiniTimeDateTimedate1Iface))

struct _MiniTimeDateTimedate1;
typedef struct _MiniTimeDateTimedate1 MiniTimeDateTimedate1;
typedef struct _MiniTimeDateTimedate1Iface MiniTimeDateTimedate1Iface;

struct _MiniTimeDateTimedate1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_set_local_rtc) (
    MiniTimeDateTimedate1 *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_local_rtc,
    gboolean arg_fix_system,
    gboolean arg_user_interaction);

  gboolean (*handle_set_ntp) (
    MiniTimeDateTimedate1 *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_use_ntp,
    gboolean arg_user_interaction);

  gboolean (*handle_set_time) (
    MiniTimeDateTimedate1 *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_usec_utc,
    gboolean arg_relative,
    gboolean arg_user_interaction);

  gboolean (*handle_set_timezone) (
    MiniTimeDateTimedate1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_timezone,
    gboolean arg_user_interaction);

  gboolean  (*get_local_rtc) (MiniTimeDateTimedate1 *object);

  gboolean  (*get_ntp) (MiniTimeDateTimedate1 *object);

  const gchar * (*get_timezone) (MiniTimeDateTimedate1 *object);

};

GType mini_time_date_timedate1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mini_time_date_timedate1_interface_info (void);
guint mini_time_date_timedate1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mini_time_date_timedate1_complete_set_time (
    MiniTimeDateTimedate1 *object,
    GDBusMethodInvocation *invocation);

void mini_time_date_timedate1_complete_set_timezone (
    MiniTimeDateTimedate1 *object,
    GDBusMethodInvocation *invocation);

void mini_time_date_timedate1_complete_set_local_rtc (
    MiniTimeDateTimedate1 *object,
    GDBusMethodInvocation *invocation);

void mini_time_date_timedate1_complete_set_ntp (
    MiniTimeDateTimedate1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void mini_time_date_timedate1_call_set_time (
    MiniTimeDateTimedate1 *proxy,
    gint64 arg_usec_utc,
    gboolean arg_relative,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mini_time_date_timedate1_call_set_time_finish (
    MiniTimeDateTimedate1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mini_time_date_timedate1_call_set_time_sync (
    MiniTimeDateTimedate1 *proxy,
    gint64 arg_usec_utc,
    gboolean arg_relative,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GError **error);

void mini_time_date_timedate1_call_set_timezone (
    MiniTimeDateTimedate1 *proxy,
    const gchar *arg_timezone,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mini_time_date_timedate1_call_set_timezone_finish (
    MiniTimeDateTimedate1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mini_time_date_timedate1_call_set_timezone_sync (
    MiniTimeDateTimedate1 *proxy,
    const gchar *arg_timezone,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GError **error);

void mini_time_date_timedate1_call_set_local_rtc (
    MiniTimeDateTimedate1 *proxy,
    gboolean arg_local_rtc,
    gboolean arg_fix_system,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mini_time_date_timedate1_call_set_local_rtc_finish (
    MiniTimeDateTimedate1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mini_time_date_timedate1_call_set_local_rtc_sync (
    MiniTimeDateTimedate1 *proxy,
    gboolean arg_local_rtc,
    gboolean arg_fix_system,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GError **error);

void mini_time_date_timedate1_call_set_ntp (
    MiniTimeDateTimedate1 *proxy,
    gboolean arg_use_ntp,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mini_time_date_timedate1_call_set_ntp_finish (
    MiniTimeDateTimedate1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mini_time_date_timedate1_call_set_ntp_sync (
    MiniTimeDateTimedate1 *proxy,
    gboolean arg_use_ntp,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *mini_time_date_timedate1_get_timezone (MiniTimeDateTimedate1 *object);
gchar *mini_time_date_timedate1_dup_timezone (MiniTimeDateTimedate1 *object);
void mini_time_date_timedate1_set_timezone (MiniTimeDateTimedate1 *object, const gchar *value);

gboolean mini_time_date_timedate1_get_local_rtc (MiniTimeDateTimedate1 *object);
void mini_time_date_timedate1_set_local_rtc (MiniTimeDateTimedate1 *object, gboolean value);

gboolean mini_time_date_timedate1_get_ntp (MiniTimeDateTimedate1 *object);
void mini_time_date_timedate1_set_ntp (MiniTimeDateTimedate1 *object, gboolean value);


/* ---- */

#define MINI_TIME_DATE_TYPE_TIMEDATE1_PROXY (mini_time_date_timedate1_proxy_get_type ())
#define MINI_TIME_DATE_TIMEDATE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MINI_TIME_DATE_TYPE_TIMEDATE1_PROXY, MiniTimeDateTimedate1Proxy))
#define MINI_TIME_DATE_TIMEDATE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MINI_TIME_DATE_TYPE_TIMEDATE1_PROXY, MiniTimeDateTimedate1ProxyClass))
#define MINI_TIME_DATE_TIMEDATE1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MINI_TIME_DATE_TYPE_TIMEDATE1_PROXY, MiniTimeDateTimedate1ProxyClass))
#define MINI_TIME_DATE_IS_TIMEDATE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MINI_TIME_DATE_TYPE_TIMEDATE1_PROXY))
#define MINI_TIME_DATE_IS_TIMEDATE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MINI_TIME_DATE_TYPE_TIMEDATE1_PROXY))

typedef struct _MiniTimeDateTimedate1Proxy MiniTimeDateTimedate1Proxy;
typedef struct _MiniTimeDateTimedate1ProxyClass MiniTimeDateTimedate1ProxyClass;
typedef struct _MiniTimeDateTimedate1ProxyPrivate MiniTimeDateTimedate1ProxyPrivate;

struct _MiniTimeDateTimedate1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MiniTimeDateTimedate1ProxyPrivate *priv;
};

struct _MiniTimeDateTimedate1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType mini_time_date_timedate1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MiniTimeDateTimedate1Proxy, g_object_unref)
#endif

void mini_time_date_timedate1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MiniTimeDateTimedate1 *mini_time_date_timedate1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
MiniTimeDateTimedate1 *mini_time_date_timedate1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void mini_time_date_timedate1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MiniTimeDateTimedate1 *mini_time_date_timedate1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
MiniTimeDateTimedate1 *mini_time_date_timedate1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define MINI_TIME_DATE_TYPE_TIMEDATE1_SKELETON (mini_time_date_timedate1_skeleton_get_type ())
#define MINI_TIME_DATE_TIMEDATE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MINI_TIME_DATE_TYPE_TIMEDATE1_SKELETON, MiniTimeDateTimedate1Skeleton))
#define MINI_TIME_DATE_TIMEDATE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MINI_TIME_DATE_TYPE_TIMEDATE1_SKELETON, MiniTimeDateTimedate1SkeletonClass))
#define MINI_TIME_DATE_TIMEDATE1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MINI_TIME_DATE_TYPE_TIMEDATE1_SKELETON, MiniTimeDateTimedate1SkeletonClass))
#define MINI_TIME_DATE_IS_TIMEDATE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MINI_TIME_DATE_TYPE_TIMEDATE1_SKELETON))
#define MINI_TIME_DATE_IS_TIMEDATE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MINI_TIME_DATE_TYPE_TIMEDATE1_SKELETON))

typedef struct _MiniTimeDateTimedate1Skeleton MiniTimeDateTimedate1Skeleton;
typedef struct _MiniTimeDateTimedate1SkeletonClass MiniTimeDateTimedate1SkeletonClass;
typedef struct _MiniTimeDateTimedate1SkeletonPrivate MiniTimeDateTimedate1SkeletonPrivate;

struct _MiniTimeDateTimedate1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MiniTimeDateTimedate1SkeletonPrivate *priv;
};

struct _MiniTimeDateTimedate1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType mini_time_date_timedate1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MiniTimeDateTimedate1Skeleton, g_object_unref)
#endif

MiniTimeDateTimedate1 *mini_time_date_timedate1_skeleton_new (void);


G_END_DECLS

#endif /* __GENERATED_H__ */
